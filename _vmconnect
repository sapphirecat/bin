#!/bin/sh

# _vmconnect: starting/connecting to VirtualBox guests
# Copyright (C) 2014,2019  Sapphire Cat <https://github.com/sapphirecat>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

DEFAULT_VM="${VMCONNECT_VM-ubuntu}"
WITH_SSH_AGENT="${VMCONNECT_START_AGENT-}"
WITH_SSH_KEY="${VMCONNECT_SSH_KEY-}"
VERSION='1.2.0-dev'

# when starting a machine: wait $PRE_SSH_WAIT*$STEP seconds before starting to
# check whether SSH is up.  Wait up to $SSH_WAIT*$STEP seconds, checking each
# time, for SSH to come up after that before assuming the VM is hung and
# failing.
PRE_SSH_WAIT="${VMCONNECT_INIT_WAIT:-6}"
SSH_WAIT="${VMCONNECT_SSH_WAIT:-30}"
STEP="${VMCONNECT_STEP:-2}"

if [ $# -gt 0 ] ; then
	case "$1" in
	-h|--help) cat <<EOF
_vmconnect $VERSION

Connects to a VirtualBox VM.  If it is not already running, it will be started
headlessly and allowed to boot.

Usage: _vmconnect [vm_name] [ssh_name]

vm_name:  Name of a VirtualBox machine to start; defaults to $DEFAULT_VM
ssh_name: Hostname or IP of the machine to connect; defaults to the vm_name
  (See also: Host and HostName in ssh_config(5).)

EOF
		exit 0 ;;

	-v|--version) echo "_vmconnect $VERSION"
		exit 0 ;;

	*) VM="$1" ;;
	esac

else
	VM="$DEFAULT_VM"
fi

if [ $# -gt 1 ] ; then
	SSH_NAME="$2"
else
	SSH_NAME="$VM"
fi


logdir="${HOME}/VirtualBox VMs"
if [ ! -d "$logdir" ] ; then
	logdir="${HOME}"
fi
logfile="$logdir/headless-$VM.log"

die() {
	rc="$1"
	shift
	echo "$@" >&2
	return "$rc"
}

start_vm() {
	[ ! -e "$logfile" ] || mv -f "$logfile" "${logfile}.old"
	nohup VBoxHeadless -s "$1" >"$logfile" 2>&1 </dev/null &

	printf "Booting %s" "$1"
	ctr=$PRE_SSH_WAIT
	while [ $ctr -gt 0 ] ; do
		sleep $STEP
		printf "."
		ctr=$(( ctr - 1 ))
	done

	echo
}

wait_for_ssh() {
	ctr="$SSH_WAIT"

	printf "Checking SSH reachability"
	while [ $ctr -gt 0 ] ; do
		preTS="$(date +%Y%m%d%H%M%S)"
		if ssh -n -o "ConnectTimeout $STEP" "$1" true </dev/null 2>/dev/null
		then
			# CONNECTION SUCCESS
			echo
			return 0
		fi

		printf "."
		# if the vm quickly refuses the connection, we still want the delay
		delta=$(( $(date +%Y%m%d%H%M%S) - preTS ))
		[ "$delta" -ge $STEP ] || sleep $(( STEP - delta ))

		ctr=$(( ctr - 1 ))
	done

	echo
	die 3 "Timeout waiting for SSH: $1"
}

setup_ssh_state() {
	[ -z "$WITH_SSH_AGENT" ] || eval "$(ssh-agent)"
	[ -z "$WITH_SSH_KEY" ] || ssh-add "$WITH_SSH_KEY"
}

cleanup_ssh_state() {
	[ -z "$WITH_SSH_AGENT" ] || eval "$(ssh-agent -k)"
	[ -z "$WITH_SSH_KEY" ] || ssh-add -d "$WITH_SSH_KEY"
}

trap cleanup_ssh_state EXIT
setup_ssh_state

VBoxManage list runningvms | grep -q "^\"$VM\"" \
	|| start_vm "$VM"

wait_for_ssh "$SSH_NAME"
ssh "$SSH_NAME"
