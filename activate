#!/usr/bin/env perl

# activate: find and run virtualenv activation scripts
# Copyright (C) 2014  Sapphire Cat <https://github.com/sapphirecat>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use 5.010;
use strict;
use warnings;

our $VERSION = '20140725.0';
use constant {
	DEFAULT_PATH => "$ENV{HOME}/git",
	VERSION_FLAIR => '[github.com/sapphirecat/bin/activate]',
};

my %opt = (
	bin => 1,
	ext => ($^O =~ /^mswin/i ? '.bat' : ''),
	path => $ENV{ACTIVATE_PATH} // DEFAULT_PATH,
);

use Config;
use File::Basename qw(basename);
use File::Spec::Functions qw(catdir catfile splitdir);
use Getopt::Long qw(GetOptions);


sub self_name () {
	basename($0);
}

sub usage (;$$) {
	my ($code, $name, $defpath) = (0, self_name, DEFAULT_PATH);

	if (@_) {
		select STDERR;
		$code = @_ > 1 ? $_[1] : 2;
		print $_[0], "\n\n";
	}

	print <<HELP;
Usage: $name [--no-bin] [--ext=EXTENSION] [--path=PATHSPEC] PROJECT [ARGS...]

Runs the activate script in PROJECT, passing it args of ARGS.

    --no-bin: Don't look for a bin/ folder within PROJECT first.
    --ext=EXTENSION: Append EXTENSION to script name.  Default is ".bat" on
	Windows, "" elsewhere.
    --path=PATHSPEC: Search for projects in PATHSPEC.  Default is taken from
	the ACTIVATE_PATH environment variable, or the built-in default:
	$defpath

HELP
	exit $code;
}

sub version () {
	my ($name) = (self_name);
	say "$name version $VERSION ", VERSION_FLAIR;
	exit 0;
}


sub _win_home ($) {
	my $spec = shift;
	# we [and git bash 3.1.0] can't handle "~user" on windows
	return $spec unless $spec eq '~';

	no warnings 'uninitialized';
	my $home = ($ENV{HOMESHARE} ?
		join('', @ENV{qw(HOMESHARE HOMEPATH)}) :
		join('', @ENV{qw(HOMEDRIVE HOMEPATH)}));

	# if that didn't work, then assume the install is broken.
	return $home || $spec;
}

sub _posix_home ($) {
	my $spec = shift;

	return $ENV{HOME} if $spec eq '~' && $ENV{HOME};

	if ($spec = /^~([-.\w]+)$/) {
		my @pwent = getpwnam($1);
		return $pwent[7] if @pwent; # return $dir field
	}

	return $spec;
}

sub expand_home ($) {
	my $raw = shift;
	my @dirs = splitdir($raw);
	return $raw unless @dirs && $dirs[0] =~ /^~/;

	my ($lead, @home) = (shift @dirs);
	@home = ($^O =~ /^MSWin/i ? _win_home($lead) : _posix_home($lead));

	return catdir(@home, @dirs);
}


sub maybe_exec ($$) {
	my ($f, $args) = @_;
	return unless -x $f;
	exec $f ($f, @$args)
		or die "Executable script $f failed to launch: $!";
}


GetOptions(\%opt,
	'help|h',
	'version|v',

	'bin!',
	'ext|x=s',
	'path|p=s',
);

if (defined $opt{help}) {
	usage();
} elsif (defined $opt{version}) {
	version();
} elsif (! @ARGV) {
	usage("No project was named to be activated.");
}

my @path = map { expand_home($_) } split(/$Config{path_sep}/, $opt{path});
my ($project, $script, $args) = (shift(@ARGV), "activate$opt{ext}", \@ARGV);
for my $dir (@path) {
	maybe_exec(catfile($dir, $project, 'bin', $script), $args) if $opt{bin};
	maybe_exec(catfile($dir, $project, $script), $args);
}

die "Project $project not found in any of: @path";

